//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InIT.API.GMMEP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GmmepEntities : DbContext
    {
        public GmmepEntities()
            : base("name=GmmepEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<spGetAllCities_Result> spGetAllCities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCities_Result>("spGetAllCities");
        }
    
        public virtual ObjectResult<spGetAllCityWithCountryId_Result> spGetAllCityWithCountryId(Nullable<int> countryid)
        {
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCityWithCountryId_Result>("spGetAllCityWithCountryId", countryidParameter);
        }
    
        public virtual ObjectResult<spGetAllCountry_Result> spGetAllCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCountry_Result>("spGetAllCountry");
        }
    
        public virtual ObjectResult<spGetAllPages_Result> spGetAllPages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPages_Result>("spGetAllPages");
        }
    
        public virtual ObjectResult<spGetAllPagesWithUserAdminId_Result> spGetAllPagesWithUserAdminId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPagesWithUserAdminId_Result>("spGetAllPagesWithUserAdminId", userIdParameter);
        }
    
        public virtual ObjectResult<spGetAllServices_Result> spGetAllServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServices_Result>("spGetAllServices");
        }
    
        public virtual ObjectResult<spGetAllServiceWithServiceId_Result> spGetAllServiceWithServiceId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServiceWithServiceId_Result>("spGetAllServiceWithServiceId", idParameter);
        }
    
        public virtual ObjectResult<spGetAllSupervisorsWithCityId_Result> spGetAllSupervisorsWithCityId(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllSupervisorsWithCityId_Result>("spGetAllSupervisorsWithCityId", cityIdParameter);
        }
    
        public virtual ObjectResult<spGetAllUsersAdmin_Result> spGetAllUsersAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUsersAdmin_Result>("spGetAllUsersAdmin");
        }
    
        public virtual ObjectResult<spGetAllUsersSupervisor_Result> spGetAllUsersSupervisor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUsersSupervisor_Result>("spGetAllUsersSupervisor");
        }
    
        public virtual ObjectResult<spInsertCategory_Result> spInsertCategory(Nullable<int> id, string name, string imagePath, Nullable<int> userId, string description, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertCategory_Result>("spInsertCategory", idParameter, nameParameter, imagePathParameter, userIdParameter, descriptionParameter, statusParameter);
        }
    
        public virtual int spInsertCityServiceMapping(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertCityServiceMapping", idParameter);
        }
    
        public virtual ObjectResult<spInsertPages_Result> spInsertPages(Nullable<int> id, string name, string componentName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var componentNameParameter = componentName != null ?
                new ObjectParameter("ComponentName", componentName) :
                new ObjectParameter("ComponentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertPages_Result>("spInsertPages", idParameter, nameParameter, componentNameParameter);
        }
    
        public virtual ObjectResult<spInsertServices_Result> spInsertServices(Nullable<int> id, string name, string code, string imagePath, string description, string rules, Nullable<int> categoryId, Nullable<int> status, Nullable<int> userId, Nullable<double> advanceamount, string rateChart, Nullable<double> additionalrate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var rulesParameter = rules != null ?
                new ObjectParameter("Rules", rules) :
                new ObjectParameter("Rules", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var advanceamountParameter = advanceamount.HasValue ?
                new ObjectParameter("advanceamount", advanceamount) :
                new ObjectParameter("advanceamount", typeof(double));
    
            var rateChartParameter = rateChart != null ?
                new ObjectParameter("RateChart", rateChart) :
                new ObjectParameter("RateChart", typeof(string));
    
            var additionalrateParameter = additionalrate.HasValue ?
                new ObjectParameter("additionalrate", additionalrate) :
                new ObjectParameter("additionalrate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertServices_Result>("spInsertServices", idParameter, nameParameter, codeParameter, imagePathParameter, descriptionParameter, rulesParameter, categoryIdParameter, statusParameter, userIdParameter, advanceamountParameter, rateChartParameter, additionalrateParameter);
        }
    
        public virtual ObjectResult<spGetAllUsersServiceProviderDetails_Result> spGetAllUsersServiceProviderDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUsersServiceProviderDetails_Result>("spGetAllUsersServiceProviderDetails");
        }
    
        public virtual ObjectResult<spGetAllServicesWithUsersServiceProviderId_Result> spGetAllServicesWithUsersServiceProviderId(Nullable<int> usersServiceProviderId)
        {
            var usersServiceProviderIdParameter = usersServiceProviderId.HasValue ?
                new ObjectParameter("UsersServiceProviderId", usersServiceProviderId) :
                new ObjectParameter("UsersServiceProviderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServicesWithUsersServiceProviderId_Result>("spGetAllServicesWithUsersServiceProviderId", usersServiceProviderIdParameter);
        }
    
        public virtual ObjectResult<spDeleteServiceMapingWithCityId_Result> spDeleteServiceMapingWithCityId(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDeleteServiceMapingWithCityId_Result>("spDeleteServiceMapingWithCityId", cityIdParameter);
        }
    
        public virtual ObjectResult<spInsertCityServiceMapingRowWise_Result> spInsertCityServiceMapingRowWise(Nullable<int> id, Nullable<int> cityId, Nullable<int> serviceId, Nullable<int> isLive, string rules, string rateChart, string description, Nullable<int> supervisorId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var isLiveParameter = isLive.HasValue ?
                new ObjectParameter("IsLive", isLive) :
                new ObjectParameter("IsLive", typeof(int));
    
            var rulesParameter = rules != null ?
                new ObjectParameter("Rules", rules) :
                new ObjectParameter("Rules", typeof(string));
    
            var rateChartParameter = rateChart != null ?
                new ObjectParameter("RateChart", rateChart) :
                new ObjectParameter("RateChart", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var supervisorIdParameter = supervisorId.HasValue ?
                new ObjectParameter("SupervisorId", supervisorId) :
                new ObjectParameter("SupervisorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertCityServiceMapingRowWise_Result>("spInsertCityServiceMapingRowWise", idParameter, cityIdParameter, serviceIdParameter, isLiveParameter, rulesParameter, rateChartParameter, descriptionParameter, supervisorIdParameter);
        }
    
        public virtual ObjectResult<spInsertUsers_Result> spInsertUsers(Nullable<int> id, string name, string mobile, string email, string address, string phoneNumber, Nullable<int> cityId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertUsers_Result>("spInsertUsers", idParameter, nameParameter, mobileParameter, emailParameter, addressParameter, phoneNumberParameter, cityIdParameter);
        }
    
        public virtual ObjectResult<spUserLoginCheck_Result> spUserLoginCheck(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserLoginCheck_Result>("spUserLoginCheck", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spGetCityDetailsWithCityId_Result> spGetCityDetailsWithCityId(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCityDetailsWithCityId_Result>("spGetCityDetailsWithCityId", cityIdParameter);
        }
    
        public virtual ObjectResult<spGetAllLocation_Result> spGetAllLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllLocation_Result>("spGetAllLocation");
        }
    
        public virtual int spInsertLocation(Nullable<int> id, string name, string code, Nullable<int> userId, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertLocation", idParameter, nameParameter, codeParameter, userIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<spDeleteTechnicians_Result> spDeleteTechnicians(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDeleteTechnicians_Result>("spDeleteTechnicians", idParameter);
        }
    
        public virtual ObjectResult<spDeleteData_Result> spDeleteData(string tableName, Nullable<int> id)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDeleteData_Result>("spDeleteData", tableNameParameter, idParameter);
        }
    
        public virtual ObjectResult<spGetAreaWithLocationId_Result> spGetAreaWithLocationId(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAreaWithLocationId_Result>("spGetAreaWithLocationId", locationIdParameter);
        }
    
        public virtual ObjectResult<spInsertServiceBooking_Result> spInsertServiceBooking(Nullable<int> id, Nullable<int> serviceid, string servicename, Nullable<int> userid, string username, string mobile, string address, Nullable<int> locationid, string latitude, string longitude, Nullable<int> paymenttype, Nullable<double> amount, Nullable<System.DateTime> servicedate, Nullable<System.DateTime> servicetime, Nullable<int> servicetype, string remarks, string offercode, Nullable<double> discount, Nullable<int> supervisorid, string paymentcode, string adminremarks, string supervisorremarks, string technicianremarks)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var locationidParameter = locationid.HasValue ?
                new ObjectParameter("locationid", locationid) :
                new ObjectParameter("locationid", typeof(int));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var paymenttypeParameter = paymenttype.HasValue ?
                new ObjectParameter("paymenttype", paymenttype) :
                new ObjectParameter("paymenttype", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(double));
    
            var servicedateParameter = servicedate.HasValue ?
                new ObjectParameter("servicedate", servicedate) :
                new ObjectParameter("servicedate", typeof(System.DateTime));
    
            var servicetimeParameter = servicetime.HasValue ?
                new ObjectParameter("servicetime", servicetime) :
                new ObjectParameter("servicetime", typeof(System.DateTime));
    
            var servicetypeParameter = servicetype.HasValue ?
                new ObjectParameter("servicetype", servicetype) :
                new ObjectParameter("servicetype", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var offercodeParameter = offercode != null ?
                new ObjectParameter("offercode", offercode) :
                new ObjectParameter("offercode", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(double));
    
            var supervisoridParameter = supervisorid.HasValue ?
                new ObjectParameter("supervisorid", supervisorid) :
                new ObjectParameter("supervisorid", typeof(int));
    
            var paymentcodeParameter = paymentcode != null ?
                new ObjectParameter("paymentcode", paymentcode) :
                new ObjectParameter("paymentcode", typeof(string));
    
            var adminremarksParameter = adminremarks != null ?
                new ObjectParameter("adminremarks", adminremarks) :
                new ObjectParameter("adminremarks", typeof(string));
    
            var supervisorremarksParameter = supervisorremarks != null ?
                new ObjectParameter("supervisorremarks", supervisorremarks) :
                new ObjectParameter("supervisorremarks", typeof(string));
    
            var technicianremarksParameter = technicianremarks != null ?
                new ObjectParameter("technicianremarks", technicianremarks) :
                new ObjectParameter("technicianremarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertServiceBooking_Result>("spInsertServiceBooking", idParameter, serviceidParameter, servicenameParameter, useridParameter, usernameParameter, mobileParameter, addressParameter, locationidParameter, latitudeParameter, longitudeParameter, paymenttypeParameter, amountParameter, servicedateParameter, servicetimeParameter, servicetypeParameter, remarksParameter, offercodeParameter, discountParameter, supervisoridParameter, paymentcodeParameter, adminremarksParameter, supervisorremarksParameter, technicianremarksParameter);
        }
    
        public virtual ObjectResult<spLoginCheckWithOTP_Result> spLoginCheckWithOTP(Nullable<int> id, string otp)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var otpParameter = otp != null ?
                new ObjectParameter("otp", otp) :
                new ObjectParameter("otp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLoginCheckWithOTP_Result>("spLoginCheckWithOTP", idParameter, otpParameter);
        }
    
        public virtual ObjectResult<spResendVerificationOtp_Result> spResendVerificationOtp(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spResendVerificationOtp_Result>("spResendVerificationOtp", idParameter);
        }
    
        public virtual ObjectResult<spUpdateUsers_Result> spUpdateUsers(Nullable<int> id, string name, string mobile, string email, string address, string pincode, string latitude, string longitude)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateUsers_Result>("spUpdateUsers", idParameter, nameParameter, mobileParameter, emailParameter, addressParameter, pincodeParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<spUserLoginWithEmailOrMobile_Result> spUserLoginWithEmailOrMobile(string mobile, string email, string password)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserLoginWithEmailOrMobile_Result>("spUserLoginWithEmailOrMobile", mobileParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spInsertServiceTimeSlots_Result> spInsertServiceTimeSlots(Nullable<int> id, Nullable<System.DateTime> starttime, Nullable<System.DateTime> endtime, Nullable<int> locationid, Nullable<int> serviceid, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.DateTime));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.DateTime));
    
            var locationidParameter = locationid.HasValue ?
                new ObjectParameter("locationid", locationid) :
                new ObjectParameter("locationid", typeof(int));
    
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertServiceTimeSlots_Result>("spInsertServiceTimeSlots", idParameter, starttimeParameter, endtimeParameter, locationidParameter, serviceidParameter, statusParameter);
        }
    
        public virtual ObjectResult<spGetAllServiceTimeSlotsWithServiceId_Result> spGetAllServiceTimeSlotsWithServiceId(Nullable<int> serviceid)
        {
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServiceTimeSlotsWithServiceId_Result>("spGetAllServiceTimeSlotsWithServiceId", serviceidParameter);
        }
    
        public virtual ObjectResult<spGetAllServiceTimeSlots_Result> spGetAllServiceTimeSlots()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServiceTimeSlots_Result>("spGetAllServiceTimeSlots");
        }
    
        public virtual ObjectResult<spGetAllCategoryWithPincode_Result> spGetAllCategoryWithPincode(string pincode)
        {
            var pincodeParameter = pincode != null ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCategoryWithPincode_Result>("spGetAllCategoryWithPincode", pincodeParameter);
        }
    
        public virtual ObjectResult<spGetAllTechniciansListWithServices_Result> spGetAllTechniciansListWithServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllTechniciansListWithServices_Result>("spGetAllTechniciansListWithServices");
        }
    
        public virtual ObjectResult<spInsertTechnicianStatus_Result> spInsertTechnicianStatus(Nullable<int> id, string name, string code, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertTechnicianStatus_Result>("spInsertTechnicianStatus", idParameter, nameParameter, codeParameter, statusParameter);
        }
    
        public virtual ObjectResult<spGetAllTechnicianStatus_Result> spGetAllTechnicianStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllTechnicianStatus_Result>("spGetAllTechnicianStatus");
        }
    
        public virtual ObjectResult<spGetAllBookingDetails_Result> spGetAllBookingDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllBookingDetails_Result>("spGetAllBookingDetails");
        }
    
        public virtual ObjectResult<spGetAllServicesWithSupervisorId_Result> spGetAllServicesWithSupervisorId(Nullable<int> supervisorId)
        {
            var supervisorIdParameter = supervisorId.HasValue ?
                new ObjectParameter("SupervisorId", supervisorId) :
                new ObjectParameter("SupervisorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServicesWithSupervisorId_Result>("spGetAllServicesWithSupervisorId", supervisorIdParameter);
        }
    
        public virtual ObjectResult<spGetAllCallAssignWithTechnicianId_Result> spGetAllCallAssignWithTechnicianId(Nullable<int> technicianid)
        {
            var technicianidParameter = technicianid.HasValue ?
                new ObjectParameter("technicianid", technicianid) :
                new ObjectParameter("technicianid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCallAssignWithTechnicianId_Result>("spGetAllCallAssignWithTechnicianId", technicianidParameter);
        }
    
        public virtual ObjectResult<spInsertCallAssign_Result> spInsertCallAssign(Nullable<int> id, Nullable<int> customerid, Nullable<int> technicianid, Nullable<System.DateTime> assignedtime, Nullable<int> assignedby, Nullable<int> servicebookingid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var technicianidParameter = technicianid.HasValue ?
                new ObjectParameter("technicianid", technicianid) :
                new ObjectParameter("technicianid", typeof(int));
    
            var assignedtimeParameter = assignedtime.HasValue ?
                new ObjectParameter("assignedtime", assignedtime) :
                new ObjectParameter("assignedtime", typeof(System.DateTime));
    
            var assignedbyParameter = assignedby.HasValue ?
                new ObjectParameter("assignedby", assignedby) :
                new ObjectParameter("assignedby", typeof(int));
    
            var servicebookingidParameter = servicebookingid.HasValue ?
                new ObjectParameter("servicebookingid", servicebookingid) :
                new ObjectParameter("servicebookingid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertCallAssign_Result>("spInsertCallAssign", idParameter, customeridParameter, technicianidParameter, assignedtimeParameter, assignedbyParameter, servicebookingidParameter);
        }
    
        public virtual ObjectResult<spGetServiceRateChartmappingWithServiceId_Result> spGetServiceRateChartmappingWithServiceId(Nullable<int> serviceid)
        {
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetServiceRateChartmappingWithServiceId_Result>("spGetServiceRateChartmappingWithServiceId", serviceidParameter);
        }
    
        public virtual ObjectResult<spGetAllCallAssignForTechnicianId_Result> spGetAllCallAssignForTechnicianId(Nullable<int> techncianid)
        {
            var techncianidParameter = techncianid.HasValue ?
                new ObjectParameter("techncianid", techncianid) :
                new ObjectParameter("techncianid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCallAssignForTechnicianId_Result>("spGetAllCallAssignForTechnicianId", techncianidParameter);
        }
    
        public virtual ObjectResult<spAdminUpdateServicebooking_Result> spAdminUpdateServicebooking(Nullable<int> id, string adminRemarks, string supervisorremarks, Nullable<System.DateTime> servicedate, Nullable<System.DateTime> servicetime)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var adminRemarksParameter = adminRemarks != null ?
                new ObjectParameter("AdminRemarks", adminRemarks) :
                new ObjectParameter("AdminRemarks", typeof(string));
    
            var supervisorremarksParameter = supervisorremarks != null ?
                new ObjectParameter("supervisorremarks", supervisorremarks) :
                new ObjectParameter("supervisorremarks", typeof(string));
    
            var servicedateParameter = servicedate.HasValue ?
                new ObjectParameter("servicedate", servicedate) :
                new ObjectParameter("servicedate", typeof(System.DateTime));
    
            var servicetimeParameter = servicetime.HasValue ?
                new ObjectParameter("servicetime", servicetime) :
                new ObjectParameter("servicetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAdminUpdateServicebooking_Result>("spAdminUpdateServicebooking", idParameter, adminRemarksParameter, supervisorremarksParameter, servicedateParameter, servicetimeParameter);
        }
    
        public virtual ObjectResult<spGetAllCallAssignDetailsWithServiceBookingId_Result> spGetAllCallAssignDetailsWithServiceBookingId(Nullable<int> bookingid)
        {
            var bookingidParameter = bookingid.HasValue ?
                new ObjectParameter("bookingid", bookingid) :
                new ObjectParameter("bookingid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCallAssignDetailsWithServiceBookingId_Result>("spGetAllCallAssignDetailsWithServiceBookingId", bookingidParameter);
        }
    
        public virtual int spInsertUsersAdmin(Nullable<int> id, string name, string mobile, string email, string address, string phoneNumber, Nullable<int> cityId, Nullable<int> status, string password)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertUsersAdmin", idParameter, nameParameter, mobileParameter, emailParameter, addressParameter, phoneNumberParameter, cityIdParameter, statusParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spGetAllAnnouncements_Result> spGetAllAnnouncements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllAnnouncements_Result>("spGetAllAnnouncements");
        }
    
        public virtual ObjectResult<spGetAllAnnouncementWithGroupId_Result> spGetAllAnnouncementWithGroupId(Nullable<int> groupid)
        {
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllAnnouncementWithGroupId_Result>("spGetAllAnnouncementWithGroupId", groupidParameter);
        }
    
        public virtual ObjectResult<spInsertAnnouncementGroup_Result> spInsertAnnouncementGroup(Nullable<int> id, string name, Nullable<int> type, Nullable<int> status, Nullable<int> orderno, Nullable<int> themetype)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var ordernoParameter = orderno.HasValue ?
                new ObjectParameter("orderno", orderno) :
                new ObjectParameter("orderno", typeof(int));
    
            var themetypeParameter = themetype.HasValue ?
                new ObjectParameter("themetype", themetype) :
                new ObjectParameter("themetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertAnnouncementGroup_Result>("spInsertAnnouncementGroup", idParameter, nameParameter, typeParameter, statusParameter, ordernoParameter, themetypeParameter);
        }
    
        public virtual ObjectResult<spInsertAnnouncements_Result> spInsertAnnouncements(Nullable<int> id, string name, Nullable<int> type, string heading, string description, Nullable<System.DateTime> date, string imageurl, string videourl, Nullable<int> videotype, Nullable<int> status, Nullable<int> orderno, Nullable<int> groupid, Nullable<int> themetype, Nullable<int> linktype, string link)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var headingParameter = heading != null ?
                new ObjectParameter("heading", heading) :
                new ObjectParameter("heading", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var imageurlParameter = imageurl != null ?
                new ObjectParameter("imageurl", imageurl) :
                new ObjectParameter("imageurl", typeof(string));
    
            var videourlParameter = videourl != null ?
                new ObjectParameter("videourl", videourl) :
                new ObjectParameter("videourl", typeof(string));
    
            var videotypeParameter = videotype.HasValue ?
                new ObjectParameter("videotype", videotype) :
                new ObjectParameter("videotype", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var ordernoParameter = orderno.HasValue ?
                new ObjectParameter("orderno", orderno) :
                new ObjectParameter("orderno", typeof(int));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(int));
    
            var themetypeParameter = themetype.HasValue ?
                new ObjectParameter("themetype", themetype) :
                new ObjectParameter("themetype", typeof(int));
    
            var linktypeParameter = linktype.HasValue ?
                new ObjectParameter("linktype", linktype) :
                new ObjectParameter("linktype", typeof(int));
    
            var linkParameter = link != null ?
                new ObjectParameter("link", link) :
                new ObjectParameter("link", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertAnnouncements_Result>("spInsertAnnouncements", idParameter, nameParameter, typeParameter, headingParameter, descriptionParameter, dateParameter, imageurlParameter, videourlParameter, videotypeParameter, statusParameter, ordernoParameter, groupidParameter, themetypeParameter, linktypeParameter, linkParameter);
        }
    
        public virtual ObjectResult<spUpdateAnnouncementVideoUrl_Result> spUpdateAnnouncementVideoUrl(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateAnnouncementVideoUrl_Result>("spUpdateAnnouncementVideoUrl", idParameter);
        }
    
        public virtual ObjectResult<UpdateServiceBookingStatus_Result> UpdateServiceBookingStatus(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateServiceBookingStatus_Result>("UpdateServiceBookingStatus", idParameter);
        }
    
        public virtual ObjectResult<spGetAllBillDetailsWithBookingId_Result> spGetAllBillDetailsWithBookingId(Nullable<int> bookingid)
        {
            var bookingidParameter = bookingid.HasValue ?
                new ObjectParameter("bookingid", bookingid) :
                new ObjectParameter("bookingid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllBillDetailsWithBookingId_Result>("spGetAllBillDetailsWithBookingId", bookingidParameter);
        }
    
        public virtual int spInsertUsersServiceProvider(Nullable<int> id, string name, string mobile, string email, string address, string phoneNumber, Nullable<int> cityId, Nullable<int> supervisorId, Nullable<int> isLive, Nullable<int> status, string password, Nullable<int> isbill, Nullable<int> isbooking)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var supervisorIdParameter = supervisorId.HasValue ?
                new ObjectParameter("SupervisorId", supervisorId) :
                new ObjectParameter("SupervisorId", typeof(int));
    
            var isLiveParameter = isLive.HasValue ?
                new ObjectParameter("IsLive", isLive) :
                new ObjectParameter("IsLive", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isbillParameter = isbill.HasValue ?
                new ObjectParameter("isbill", isbill) :
                new ObjectParameter("isbill", typeof(int));
    
            var isbookingParameter = isbooking.HasValue ?
                new ObjectParameter("isbooking", isbooking) :
                new ObjectParameter("isbooking", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertUsersServiceProvider", idParameter, nameParameter, mobileParameter, emailParameter, addressParameter, phoneNumberParameter, cityIdParameter, supervisorIdParameter, isLiveParameter, statusParameter, passwordParameter, isbillParameter, isbookingParameter);
        }
    
        public virtual ObjectResult<spInsertUsersSupervisor_Result> spInsertUsersSupervisor(Nullable<int> id, string name, string mobile, string email, string address, string phoneNumber, Nullable<int> cityId, Nullable<int> status, string password, Nullable<int> serviceid, Nullable<int> isbill, Nullable<int> isbooking, Nullable<int> isauthorise)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            var isbillParameter = isbill.HasValue ?
                new ObjectParameter("isbill", isbill) :
                new ObjectParameter("isbill", typeof(int));
    
            var isbookingParameter = isbooking.HasValue ?
                new ObjectParameter("isbooking", isbooking) :
                new ObjectParameter("isbooking", typeof(int));
    
            var isauthoriseParameter = isauthorise.HasValue ?
                new ObjectParameter("isauthorise", isauthorise) :
                new ObjectParameter("isauthorise", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertUsersSupervisor_Result>("spInsertUsersSupervisor", idParameter, nameParameter, mobileParameter, emailParameter, addressParameter, phoneNumberParameter, cityIdParameter, statusParameter, passwordParameter, serviceidParameter, isbillParameter, isbookingParameter, isauthoriseParameter);
        }
    
        public virtual ObjectResult<spUpdateServiceBookingAuthoriseStatus_Result> spUpdateServiceBookingAuthoriseStatus(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateServiceBookingAuthoriseStatus_Result>("spUpdateServiceBookingAuthoriseStatus", idParameter);
        }
    
        public virtual ObjectResult<spGetAllCallReports_Result> spGetAllCallReports(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCallReports_Result>("spGetAllCallReports", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<spGetAllClosedReports_Result> spGetAllClosedReports(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllClosedReports_Result>("spGetAllClosedReports", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<spUpdateBillAmountWithServiceBookingId_Result> spUpdateBillAmountWithServiceBookingId(Nullable<double> amount, Nullable<int> bookingid)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(double));
    
            var bookingidParameter = bookingid.HasValue ?
                new ObjectParameter("bookingid", bookingid) :
                new ObjectParameter("bookingid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateBillAmountWithServiceBookingId_Result>("spUpdateBillAmountWithServiceBookingId", amountParameter, bookingidParameter);
        }
    
        public virtual ObjectResult<spGetAllServicesWithLocationId_Result> spGetAllServicesWithLocationId(Nullable<int> locationid)
        {
            var locationidParameter = locationid.HasValue ?
                new ObjectParameter("locationid", locationid) :
                new ObjectParameter("locationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServicesWithLocationId_Result>("spGetAllServicesWithLocationId", locationidParameter);
        }
    
        public virtual int spGetAllServicesForSupervisorWithLocationId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllServicesForSupervisorWithLocationId");
        }
    
        public virtual ObjectResult<spGetAllSupervisorLocationServiceMappingWithSupervisorId_Result> spGetAllSupervisorLocationServiceMappingWithSupervisorId(Nullable<int> supervisorid)
        {
            var supervisoridParameter = supervisorid.HasValue ?
                new ObjectParameter("supervisorid", supervisorid) :
                new ObjectParameter("supervisorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllSupervisorLocationServiceMappingWithSupervisorId_Result>("spGetAllSupervisorLocationServiceMappingWithSupervisorId", supervisoridParameter);
        }
    
        public virtual ObjectResult<spRevokeServiceBookingStatus_Result> spRevokeServiceBookingStatus(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRevokeServiceBookingStatus_Result>("spRevokeServiceBookingStatus", idParameter);
        }
    
        public virtual int spGetAllSupervisorWithLocationId(Nullable<int> locationid)
        {
            var locationidParameter = locationid.HasValue ?
                new ObjectParameter("locationid", locationid) :
                new ObjectParameter("locationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllSupervisorWithLocationId", locationidParameter);
        }
    
        public virtual ObjectResult<spGetAllLiveBookingDetails_Result> spGetAllLiveBookingDetails(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllLiveBookingDetails_Result>("spGetAllLiveBookingDetails", useridParameter);
        }
    
        public virtual ObjectResult<spGetAllPastBookingDetails_Result> spGetAllPastBookingDetails(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPastBookingDetails_Result>("spGetAllPastBookingDetails", useridParameter);
        }
    
        public virtual ObjectResult<spEndCallAssign_Result> spEndCallAssign(Nullable<int> callassignid, string remarks, Nullable<double> amount, Nullable<int> status, string stopimageurl)
        {
            var callassignidParameter = callassignid.HasValue ?
                new ObjectParameter("callassignid", callassignid) :
                new ObjectParameter("callassignid", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(double));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var stopimageurlParameter = stopimageurl != null ?
                new ObjectParameter("stopimageurl", stopimageurl) :
                new ObjectParameter("stopimageurl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEndCallAssign_Result>("spEndCallAssign", callassignidParameter, remarksParameter, amountParameter, statusParameter, stopimageurlParameter);
        }
    
        public virtual ObjectResult<spGetStartCallAssign_Result> spGetStartCallAssign(Nullable<int> callassignid, string startlocation, string startimageurl)
        {
            var callassignidParameter = callassignid.HasValue ?
                new ObjectParameter("callassignid", callassignid) :
                new ObjectParameter("callassignid", typeof(int));
    
            var startlocationParameter = startlocation != null ?
                new ObjectParameter("startlocation", startlocation) :
                new ObjectParameter("startlocation", typeof(string));
    
            var startimageurlParameter = startimageurl != null ?
                new ObjectParameter("startimageurl", startimageurl) :
                new ObjectParameter("startimageurl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStartCallAssign_Result>("spGetStartCallAssign", callassignidParameter, startlocationParameter, startimageurlParameter);
        }
    
        public virtual ObjectResult<spGetAllSupervisorsWithCityIdAndServiceId_Result> spGetAllSupervisorsWithCityIdAndServiceId(Nullable<int> locationId, Nullable<int> serviceId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllSupervisorsWithCityIdAndServiceId_Result>("spGetAllSupervisorsWithCityIdAndServiceId", locationIdParameter, serviceIdParameter);
        }
    
        public virtual ObjectResult<spGetAllAnnouncementsWithType_Result> spGetAllAnnouncementsWithType(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllAnnouncementsWithType_Result>("spGetAllAnnouncementsWithType", typeParameter);
        }
    
        public virtual ObjectResult<spUpdateServicebookingServiceStatusByAdmin_Result> spUpdateServicebookingServiceStatusByAdmin(Nullable<int> servicebookingid, Nullable<int> status)
        {
            var servicebookingidParameter = servicebookingid.HasValue ?
                new ObjectParameter("servicebookingid", servicebookingid) :
                new ObjectParameter("servicebookingid", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateServicebookingServiceStatusByAdmin_Result>("spUpdateServicebookingServiceStatusByAdmin", servicebookingidParameter, statusParameter);
        }
    
        public virtual ObjectResult<spGetAllBookingDetailsWithSupervisorId_Result> spGetAllBookingDetailsWithSupervisorId(Nullable<int> supervisorid)
        {
            var supervisoridParameter = supervisorid.HasValue ?
                new ObjectParameter("supervisorid", supervisorid) :
                new ObjectParameter("supervisorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllBookingDetailsWithSupervisorId_Result>("spGetAllBookingDetailsWithSupervisorId", supervisoridParameter);
        }
    
        public virtual ObjectResult<spGetAllServicesWithPincode_Result> spGetAllServicesWithPincode(string pincode)
        {
            var pincodeParameter = pincode != null ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServicesWithPincode_Result>("spGetAllServicesWithPincode", pincodeParameter);
        }
    
        public virtual ObjectResult<spGetTopTwelveServicesWithPincode_Result> spGetTopTwelveServicesWithPincode(string pincode)
        {
            var pincodeParameter = pincode != null ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTopTwelveServicesWithPincode_Result>("spGetTopTwelveServicesWithPincode", pincodeParameter);
        }
    
        public virtual ObjectResult<spGetAllCategories_Result> spGetAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCategories_Result>("spGetAllCategories");
        }
    
        public virtual ObjectResult<spGetAllCategoriesforDisplay_Result> spGetAllCategoriesforDisplay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCategoriesforDisplay_Result>("spGetAllCategoriesforDisplay");
        }
    
        public virtual ObjectResult<spGetAllServicesWithCityId_Result> spGetAllServicesWithCityId(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServicesWithCityId_Result>("spGetAllServicesWithCityId", cityIdParameter);
        }
    
        public virtual ObjectResult<spGetAllLocationServiceMappingDetails_Result> spGetAllLocationServiceMappingDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllLocationServiceMappingDetails_Result>("spGetAllLocationServiceMappingDetails");
        }
    
        public virtual ObjectResult<spGetAllServicesforDisplay_Result> spGetAllServicesforDisplay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllServicesforDisplay_Result>("spGetAllServicesforDisplay");
        }
    
        public virtual ObjectResult<spGetMastersCount_Result> spGetMastersCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMastersCount_Result>("spGetMastersCount");
        }
    }
}
